import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/components/ui/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Copy, ExternalLink, Check, X, Plus } from "lucide-react";

export function TelegramBotSetup() {
  const [botToken, setBotToken] = useState("");
  const [isSettingWebhook, setIsSettingWebhook] = useState(false);
  const [aiProvider, setAiProvider] = useState("openai");
  const { toast } = useToast();

  // Mock secrets status - in real app this would come from API
  const secretsStatus = {
    TELEGRAM_BOT_TOKEN: true,
    OPENAI_API_KEY: true,
    DEEPSEEK_API_KEY: false,
    AI_PROVIDER: false,
  };

  const webhookUrl = "https://ktzixrajviveolgggilq.functions.supabase.co/telegram-webhook";

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const setWebhook = async () => {
    if (!botToken) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞",
        variant: "destructive",
      });
      return;
    }

    setIsSettingWebhook(true);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
      const botInfoResponse = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
      const botInfo = await botInfoResponse.json();
      
      if (!botInfo.ok) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const response = await fetch(`https://api.telegram.org/bot${botToken}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          drop_pending_updates: true, // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }),
      });

      const data = await response.json();
      
      if (data.ok) {
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ!",
          description: `Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ @${botInfo.result.username}. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.`,
        });
      } else {
        throw new Error(data.description || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook');
      }
    } catch (error) {
      console.error('Error setting webhook:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook",
        variant: "destructive",
      });
    } finally {
      setIsSettingWebhook(false);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
        </CardTitle>
        <CardDescription>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞—Ö —á–µ—Ä–µ–∑ Telegram
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <h3 className="text-lg font-semibold">–°—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤ Supabase</h3>
          <div className="grid grid-cols-2 gap-3">
            {Object.entries(secretsStatus).map(([secret, configured]) => (
              <div key={secret} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex items-center gap-2">
                  {configured ? (
                    <Check className="h-4 w-4 text-green-600" />
                  ) : (
                    <X className="h-4 w-4 text-red-600" />
                  )}
                  <span className="text-sm font-medium">{secret}</span>
                </div>
                {configured ? (
                  <Badge variant="default" className="bg-green-100 text-green-800">
                    –ù–∞—Å—Ç—Ä–æ–µ–Ω
                  </Badge>
                ) : (
                  <Badge variant="destructive" className="bg-red-100 text-red-800">
                    –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                  </Badge>
                )}
              </div>
            ))}
          </div>
          
          <div className="grid grid-cols-2 gap-3">
            {!secretsStatus.DEEPSEEK_API_KEY && (
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <Plus className="h-4 w-4" />
                –î–æ–±–∞–≤–∏—Ç—å DeepSeek API
              </Button>
            )}
            {!secretsStatus.AI_PROVIDER && (
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <Plus className="h-4 w-4" />
                –î–æ–±–∞–≤–∏—Ç—å AI Provider
              </Button>
            )}
          </div>
        </div>

        <div className="space-y-3">
          <Label htmlFor="aiProvider">AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä</Label>
          <Select value={aiProvider} onValueChange={setAiProvider}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="openai">OpenAI (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)</SelectItem>
              <SelectItem value="deepseek">DeepSeek (—ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)</SelectItem>
              <SelectItem value="mixed">–°–º–µ—à–∞–Ω–Ω—ã–π (DeepSeek + OpenAI –¥–ª—è –∞—É–¥–∏–æ/—Ñ–æ—Ç–æ)</SelectItem>
            </SelectContent>
          </Select>
          <p className="text-sm text-muted-foreground">
            {aiProvider === "openai" && "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"}
            {aiProvider === "deepseek" && "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ DeepSeek (–¥–µ—à–µ–≤–ª–µ, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)"}
            {aiProvider === "mixed" && "DeepSeek –¥–ª—è —Ç–µ–∫—Å—Ç–∞, OpenAI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ"}
          </p>
        </div>

        <Alert>
          <AlertDescription>
            <strong>–®–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</strong>
            <ol className="list-decimal list-inside mt-2 space-y-1">
              <li>–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram</li>
              <li>–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –æ—Ç OpenAI –∏/–∏–ª–∏ DeepSeek</li>
              <li>–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ Supabase</li>
              <li>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä</li>
              <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –±–æ—Ç–∞</li>
            </ol>
          </AlertDescription>
        </Alert>

        <div className="space-y-2">
          <Label htmlFor="botToken">–¢–æ–∫–µ–Ω –±–æ—Ç–∞</Label>
          <Input
            id="botToken"
            type="password"
            placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
            value={botToken}
            onChange={(e) => setBotToken(e.target.value)}
          />
        </div>

        <div className="space-y-2">
          <Label>Webhook URL</Label>
          <div className="flex items-center gap-2">
            <Input
              value={webhookUrl}
              readOnly
              className="flex-1"
            />
            <Button
              variant="outline"
              size="icon"
              onClick={() => copyToClipboard(webhookUrl)}
            >
              <Copy className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <Button
          onClick={setWebhook}
          disabled={isSettingWebhook || !botToken}
          className="w-full"
        >
          {isSettingWebhook ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞..." : "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞"}
        </Button>

        <Alert>
          <AlertDescription>
            <strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</strong>
            <ul className="list-disc list-inside mt-2 space-y-1">
              <li><strong>–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:</strong> –ò—Å–ø–æ–ª—å–∑—É—è {aiProvider === 'openai' ? 'OpenAI' : aiProvider === 'deepseek' ? 'DeepSeek' : 'DeepSeek + OpenAI'}</li>
              <li><strong>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:</strong> "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, —Ç–µ–ª–µ—Ñ–æ–Ω +79001234567, —Å—Ç–∞–≤–∫–∞ 3000 —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å"</li>
              <li><strong>–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</strong> "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª 8 —á–∞—Å–æ–≤" –∏–ª–∏ "–ü–µ—Ç—Ä–æ–≤ –±–æ–ª–µ–µ—Ç"</li>
              <li><strong>–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É:</strong> "–í—ã–ø–ª–∞—Ç–∏–ª –ò–≤–∞–Ω–æ–≤—É 15000 —Ä—É–±–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é"</li>
              <li><strong>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ —Å OpenAI)</li>
              <li><strong>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</strong> –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å OpenAI)</li>
            </ul>
          </AlertDescription>
        </Alert>

        <div className="flex items-center justify-between pt-4 border-t">
          <span className="text-sm text-muted-foreground">
            –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π?
          </span>
          <Button variant="outline" size="sm" asChild>
            <a
              href="https://supabase.com/dashboard/project/ktzixrajviveolgggilq/settings/functions"
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2"
            >
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
              <ExternalLink className="h-4 w-4" />
            </a>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
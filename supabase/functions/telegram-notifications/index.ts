import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_ANON_KEY') ?? ''
);

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, data } = await req.json();
    
    if (!TELEGRAM_BOT_TOKEN) {
      throw new Error('Telegram bot token not configured');
    }

    let message = '';
    let chatId = data.chatId || data.telegram_chat_id;

    switch (action) {
      case 'project_status_update':
        message = `üèóÔ∏è *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞*\n\n` +
                 `–ü—Ä–æ–µ–∫—Ç: ${data.projectName}\n` +
                 `–°—Ç–∞—Ç—É—Å: ${data.status}\n` +
                 `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${data.progress}%\n` +
                 `–ë—é–¥–∂–µ—Ç: ${data.budget} —Ä—É–±.\n` +
                 `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${data.spent} —Ä—É–±.`;
        break;

      case 'attendance_reminder':
        message = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏*\n\n` +
                 `–ü—Ä–∏–≤–µ—Ç, ${data.workerName}!\n` +
                 `–ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –æ–±—ä–µ–∫—Ç–µ "${data.projectName}"\n` +
                 `–í—Ä–µ–º—è: ${data.time}`;
        break;

      case 'expense_added':
        message = `üí∞ *–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥*\n\n` +
                 `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data.category}\n` +
                 `–°—É–º–º–∞: ${data.amount} —Ä—É–±.\n` +
                 `–ü—Ä–æ–µ–∫—Ç: ${data.projectName}\n` +
                 `–î–∞—Ç–∞: ${data.date}`;
        break;

      case 'task_assigned':
        message = `üìã *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞*\n\n` +
                 `–ó–∞–¥–∞—á–∞: ${data.taskTitle}\n` +
                 `–ü—Ä–æ–µ–∫—Ç: ${data.projectName}\n` +
                 `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data.workerName}\n` +
                 `–°—Ä–æ–∫: ${data.dueDate}`;
        break;

      case 'budget_alert':
        message = `‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ*\n\n` +
                 `–ü—Ä–æ–µ–∫—Ç: ${data.projectName}\n` +
                 `–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞: ${data.overrun}%\n` +
                 `–õ–∏–º–∏—Ç: ${data.budget} —Ä—É–±.\n` +
                 `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${data.spent} —Ä—É–±.`;
        break;

      case 'daily_report':
        message = `üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n` +
                 `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${data.activeProjects}\n` +
                 `–†–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö: ${data.workersOnSite}\n` +
                 `–†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å: ${data.dailyExpenses} —Ä—É–±.\n` +
                 `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${data.completedTasks}`;
        break;

      default:
        throw new Error(`Unknown action: ${action}`);
    }

    // Send message to Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown'
      }),
    });

    if (!telegramResponse.ok) {
      const errorText = await telegramResponse.text();
      throw new Error(`Telegram API error: ${errorText}`);
    }

    const telegramResult = await telegramResponse.json();
    
    // Log notification
    const { error: logError } = await supabase
      .from('notifications_log')
      .insert({
        type: action,
        recipient: chatId,
        message: message,
        status: 'sent',
        sent_at: new Date().toISOString()
      });

    if (logError) {
      console.error('Failed to log notification:', logError);
    }

    return new Response(JSON.stringify({
      success: true,
      messageId: telegramResult.result.message_id,
      action,
      recipient: chatId
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in telegram-notifications:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    return new Response(JSON.stringify({ 
      error: errorMessage,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});